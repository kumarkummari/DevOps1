How do you revert a commit that has already been pushed and made public?
Hide answer
One or more commits can be reverted through the use of git revert. This command, in essence, creates a new commit with patches that cancel out the changes introduced in specific commits. In case the commit that needs to be reverted has already been published or changing the repository history is not an option, git revert can be used to revert commits. Running the following command will revert the last two commits:

git revert HEAD~2..HEAD
Alternatively, one can always checkout the state of a particular commit from the past, and commit it anew.
Comment

=========
How do you squash last N commits into a single commit?
Hide answer
Squashing multiple commits into a single commit will overwrite history, and should be done with caution. However, this is useful when working in feature branches. To squash the last N commits of the current branch, run the following command (with {N} replaced with the number of commits that you want to squash):

git rebase -i HEAD~{N}
Upon running this command, an editor will open with a list of these N commit messages, one per line. Each of these lines will begin with the word “pick”. Replacing “pick” with “squash” or “s” will tell Git to combine the commit with the commit before it. To combine all N commits into one, set every commit in the list to be squash except the first one. Upon exiting the editor, and if no conflict arises, git rebase will allow you to create a new commit message for the new combined commit.
Comment

=========
How do you find a list of files that has changed in a particular commit?
Hide answer
git diff-tree -r {hash}
Given the commit hash, this will list all the files that were changed or added in that commit. The -r flag makes the command list individual files, rather than collapsing them into root directory names only.

The output will also include some extra information, which can be easily suppressed by including a couple of flags:

git diff-tree --no-commit-id --name-only -r {hash}
Here --no-commit-id will supress the commit hashes from appearing in the output, and --name-only will only print the file names, instead of their paths.
Comment

=========
Find top Git talent today. Toptal can match you with the best developers to finish your project.

HIRE TOPTAL’S GIT DEVELOPERS
How do you setup a script to run every time a repository receives new commits through push?
Hide answer
To configure a script to run every time a repository receives new commits through push, one needs to define either a pre-receive, update, or a post-receive hook depending on when exactly the script needs to be triggered.

Pre-receive hook in the destination repository is invoked when commits are pushed to it. Any script bound to this hook will be executed before any references are updated. This is a useful hook to run scripts that help enforce development policies.

Update hook works in a similar manner to pre-receive hook, and is also triggered before any updates are actually made. However, the update hook is called once for every commit that has been pushed to the destination repository.

Finally, post-receive hook in the repository is invoked after the updates have been accepted into the destination repository. This is an ideal place to configure simple deployment scripts, invoke some continuous integration systems, dispatch notification emails to repository maintainers, etc.

Hooks are local to every Git repository and are not versioned. Scripts can either be created within the hooks directory inside the “.git” directory, or they can be created elsewhere and links to those scripts can be placed within the directory.
Comment

=========
What is git bisect? How can you use it to determine the source of a (regression) bug?
Hide answer
Git provides a rather efficient mechanism to find bad commits. Instead of making the user try out every single commit to find out the first one that introduced some particular issue into the code, git bisect allows the user to perform a sort of binary search on the entire history of a repository.

By issuing the command git bisect start, the repository enters bisect mode. After this, all you have to do is identify a bad and a good commit:

git bisect bad # marks the current version as bad
git bisect good {hash or tag} # marks the given hash or tag as good, ideally of some earlier commit
Once this is done, Git will then have a range of commits that it needs to explore. At every step, it will checkout a certain commit from this range, and require you to identify it as good or bad. After which the range will be effectively halved, and the whole search will require a lot less number of steps than the actual number of commits involved in the range. Once the first bad commit has been found, or the bisect mode needs to be ended, the following command can be used to exit the mode and reset the bisection state:

git bisect reset
Comment

=========
What are the different ways you can refer to a commit?
Hide answer
In Git each commit is given a unique hash. These hashes can be used to identify the corresponding commits in various scenarios (such as while trying to checkout a particular state of the code using the git checkout {hash} command).

Additionally, Git also maintains a number of aliases to certain commits, known as refs. Also, every tag that you create in the repository effectively becomes a ref (and that is exactly why you can use tags instead of commit hashes in various git commands). Git also maintains a number of special aliases that change based on the state of the repository, such as HEAD, FETCH_HEAD, MERGE_HEAD, etc.

Git also allows commits to be referred as relative to one another. For example, HEAD~1 refers to the commit parent to HEAD, HEAD~2 refers to the grandparent of HEAD, and so on. In case of merge commits, where the commit has two parents, ^ can be used to select one of the two parents, e.g. HEAD^2 can be used to follow the second parent.

And finally, refspecs. These are used to map local and remote branches together. However, these can be used to refer to commits that reside on remote branches allowing one to control and manipulate them from a local Git environment.
Comment

=========
What is git rebase and how can it be used to resolve conflicts in a feature branch before merge?
Hide answer
In simple words, git rebase allows one to move the first commit of a branch to a new starting location. For example, if a feature branch was created from master, and since then the master branch has received new commits, git rebase can be used to move the feature branch to the tip of master. The command effectively will replay the changes made in the feature branch at the tip of master, allowing conflicts to be resolved in the process. When done with care, this will allow the feature branch to be merged into master with relative ease and sometimes as a simple fast-forward operation.
Comment

=========
How do you configure a Git repository to run code sanity checking tools right before making commits, and preventing them if the test fails?
Hide answer
This can be done with a simple script bound to the pre-commit hook of the repository. The pre-commit hook is triggered right before a commit is made, even before you are required to enter a commit message. In this script one can run other tools, such as linters and perform sanity checks on the changes being committed into the repository. For example, the following script:

#!/bin/sh
files=$(git diff --cached --name-only --diff-filter=ACM | grep '.go$')
if [ -z files ]; then
    exit 0
fi
unfmtd=$(gofmt -l $files)
if [ -z unfmtd ]; then
    exit 0
fi
echo “Some .go files are not fmt’d”
exit 1
… checks to see if any .go file that is about to be commited needs to be passed through the standard Go source code formatting tool gofmt. By exiting with a non-zero status, the script effectively prevents the commit from being applied to the repository.


===============
Question: How to delete a Git branch both locally and remotely?
To remove a local branch from your local system.
git branch -d the_local_branch

To remove a remote branch from the server.
git push origin :the_remote_branch



Question: How do you undo the last commit?
git revert commit-id



Question: How to Edit an incorrect commit message in Git?
git commit --amend -m "This is your new git message"



Question: What are the differences between 'git pull' and 'git fetch'?
Git pull automatically merges the commits without letting you review them first.
Git fetch stores them in your local repository but it not merge them with your current branch.
git fetch similar to guit pull but it does not merge the changes.


Question: How do you rename the local branch?
git branch -m oldBranchName newBranchName



Question: How do I remove local files (Not in Repo) from my current Git branch?
git clean -f -n


Question: How to Checkout remote Git branch?
git checkout test



Question: How do I remove a Git submodule?
git rm the_submodule
rm -rf .git/modules/the_submodule



Question: How do you create a remote Git branch?
git checkout -b your_branch_name
git push -u origin your_branch_name



Question: How to Change the URL for a remote Git repository?
git remote set-url origin git://this.is.new.url



Question: How to Change the author of a commit in Git?
git filter-branch -f --env-filter "GIT_AUTHOR_NAME='NewAuthorName'; GIT_AUTHOR_EMAIL='authoremail@gmail.com'; GIT_COMMITTER_NAME='CommiterName'; GIT_COMMITTER_EMAIL='committergmail@gmail.com';" HEAD

=======================================

GIT Tips/ Interview Questions & Answers
Here are some basic Git Commands. Hope this will help you.

01) How do you start Git and what is the process called?
A) $ git init
The process is called initializing a git repository
02) How do you determine the current state of the project?
A) $ git status
03) How Can I Move all your changes since your last commit to the staging area.
A) $ git add .
04) How to Store the saved changes in the repository and add a message "first commit".
A) $ git commit -m "first commit"
05) Show a list of all the commits that have been made.
A) $ git log or $ git g
06) How do you put your local repository (repo) on the GitHub server?
A) a. create a new repository in github

b. get the SSH key (SSH stands for secure shell)


c. $ git remote add origin [SSH key - something like git@github.com…]


d. $ git push -u origin master

07) How to take a git project from GitHub to your local machine to work on it.
A) $ git pull origin master
Or, if you are taking a project that is not already on your local machine, use $ git clone.
08) What is the purpose of working off multiple branches.
A) You can create a separate branch when you are developing a feature, etc. and can commit to this branch separately.  When the feature branch is working properly, you can merge it with the master branch.
09) Write the command to create a branch called working
A) $ git checkout -b working
10) How to list all of the branches.
A) $ git branch
11)How to switch to the working branch
A) $ git checkout working
12) How to merge the changes that were made in the working branch with the master branch.
A) $ git checkout master
$ git merge working
13) How to delete the working branch
A) $ git branch -d working
14) What is the command to Put everything up on the remote repository.
A) $ git push
15) Pull a branch from a remote repository and create the branch locally.
A) git checkout -b fix_stuff origin/fix_stuff
16) How to Make a directory called git_test?
A) $ mkdir git_test
17) How can I Change to git_test directory ?
A) $ cd git_test
18) How to make sure that you are in the right directory?
A) $ pwd
/Users/username/Desktop/git_test
19) How Can I Initialize and empty git repository?
A) $ git init
20) How to Create a text file called form.txt
A) $ touch form.txt
21)Open readme.txt file with your text editor and add two lines of text:

This is the first line of text


This is the second line of text


Check the git status

A) $ git status
Notice that you are on the master branch and that changes have not been committed yet
22) How to Add the files to be committed?
A) $ git add new.txt
23) What is the command to Make your first commit?
A) $ git commit -m “first commit”
24) How to Add the changes and make a second commit?
A) $ git add .
$ git commit -m “Second commit”
25) How Can I Create a new branch called temp?
A) $ git checkout -b temp
26) How Can I check my Branch Status?
A) $ git branch or $ git b
27) Run a command to show the commits that have been made to the temp branch.
A) $ git log
28) How Can I Switch to the other branch?
A) $ git checkout other branch.
29) Add a line to the some.txt file and then throw out all changes since the last commit.
A) $ git reset --hard
================================================================================